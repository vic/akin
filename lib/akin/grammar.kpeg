# -*- mode: ruby -*-

%% name = Akin::Grammar
%% { include Akin::Parser }

root = - block(ctx)?:b - eof {b}

eof = !.

comment = /#!.*?$/
nl = "\n" | "\r\n"
ws = " " | "\t"

op = /[\~\!@\#\$%\^\&\|\?\<\>*\/+=:-]/

p = &. ~current_position
- = (ws | nl | comment)*
s = (ws | nl | comment | ";")*

brace = <.> &{brace(text)} ~brace(text)

left_brace = <brace:b> &{ text == b.first} ~b
right_brace(l) = <brace:b> &{ text == l.last } ~l

braced = left_brace:l - (braced_(ctx) | ~nil):a - right_brace(l) {[l] + Array(a)}
braced_(x) = braced_(x):a - "," - block(x):b {a + Array(b)}
           | block(x):b ~Array(b)

block(x) = block(x):a ws* nl - block(x):b &{a.pos.column < b.pos.column}
           { a.name == :chain && (a.args.push(b);a) || a.with(:chain, a, b) }
         | block_(x):b {b.size > 1 && n(b.first.pos, :block, *b) || b.first}
block_(x) = block_(x):b - ";" s chain(x):c {Array(c)}:a {b + a}
          | block_(x):b s chain(x):c {Array(c)}:a
            &{b.first.pos.column == a.first.pos.column} {b + a}
          | chain(x):c ~Array(c)

chain(x) = chain_(x):c {c.size > 1 && n(c.first.pos, :chain, *c) || c.first}
chain_(x) = chain_(x):c - "." &{x.kmsg?} - chain_(x):v {c + v}
          | chain_(x):c &{c.last.name == :oper} (ws* nl -)?
            value(x.at(c.first.pos)):v {c + v}
          | chain_(x):c oper:o {c + [o]}
          | chain_(x):c ws+
            value(x.at(c.first.pos)):v {c + v}
          | value(x)

value(x) = value_(x):v {Array(v)}:a &{a.first.pos.column > x.pos.column} ~a

value_(x) = &{x.kmsg?} kmsg(x)
          | value_(x):v p:p braced:b !&":" {Array(v)}:a {a.first}:f 
          { a = [f.with(:cell, *f.args)] if a.size == 1 &&
                f.name == :name || f.name == :oper
            a + [n(p, :send, *b)] }
          | empty(x) | space
          | literal(x):a (&{x.kmsg?} | !&":") ~a

space = p:p braced:a ~n(p, :space, *a)

empty(x) = p:p braced:a ":" ws* empty_(x):b  ~n(p, :empty, *(a+b))
empty_(x) = (braced_(x) | ~nil):a (ws* nl - block(x) | ~nil):b {Array(a) + Array(b)}

name = p:p <(!&(ws|nl|brace|op|":"|";"|","|".") .)+> ~n(p, :name, text)
oper = p:p <".." (op|".")* | op op*> ~n(p, :oper, text)

keyargs(x) = (keyargs_(x.kmsg!) | ~nil):a (ws* nl - braced_(x)| ~nil):b
             {Array(a) + Array(b)}
keyargs_(x) = keyargs_(x):a ws* "," ws* chain(x):c {a + Array(c)}
            | chain(x):c ~Array(c)

keyw(x) = <name | oper> ":" {[text, nil]}
keya(x) = <name | oper> braced:a ":" {[text] + a}

keyword(x) = keyw(x) | keya(x)
part(x) = p:p keyword(x):a &(ws* keyword(x)) ~n(p, :part, *a)
        | p:p keyword(x):a ws* "." - empty_(x):b ~n(p, :part, *(a+b))
        | p:p keyword(x):a ws* keyargs(x.in(x.pos.minor(p))):b ~n(p, :part, *(a+b))

parts(x) = parts(x):a - part(x):b {a + [b]}
         | part(x):a {[a]}

kmsg(x) = parts(x):a ~n(a.first.pos, :kmsg, *a)

literal(x) = symbol(x) | infix | cell | str | float | fixnum | regexp | name | oper

symbol(x) = p:p ":" !&":" value(x.kmsg):v ~n(p, :symbol, v.first)

infix_ = <"#"+> !&(brace|"!") {text.size} | {0}
infix = p:p infix_:l <name|oper> infix_:r &{ l+r > 0 }
        ~n(p, :infix, text, l, r)

cell = p:p "\\" <name|oper> ~n(p, :cell, text)

regexp = p:p quoted(:text, & "/"):b ~n(p, :regexp, text_node(p, b))

float = p:p sign:s dec:n "." dec:f ~n(p, :float, (s+n+"."+f).to_f)

fixnum = p:p (hexadec | binary | octal | decimal):n ~n(p, :fixnum, n)

digits(d) = < d+ ("_" d+)* > { text.gsub('_', '') }

sign = "+" {"+"} | "-" { "-"} | {"+"}

dec = digits(&/[0-9]/):d {d}
oct = "0" /[oO]/? digits(&/[0-7]/):d {d}
hex = "0" /[xX]/ digits(&/[0-9a-fA-F]/):d {d}
bin = "0" /[bB]/ digits(&/[0-1]/):d {d}

hexadec = sign:s hex:d {(s+d).to_i(16)}
binary = sign:s bin:d {(s+d).to_i(2)}
octal = sign:s oct:d {(s+d).to_i(8)}
decimal = sign:s dec:d {(s+d).to_i(10)}

str = (mstr | sstr | qstr)

qstr = p:p "'" <( "\\" escape |  "\\'" | !&"'" .)*> "'" ~n(p, :text, text)

sstr = p:p quoted(:text, & "\""):b ~text_node(p, b)

quoted(t,q) = q quoted_inner(t,q)*:b q {b}

quoted_inner(t,q) = p:p "#{" - block(ctx)?:b - "}" {b}
                  | p:p < ("\\" escape | ("\\" q | "\\#" | &!((q | "#{")) .))+ >
                    ~n(p, t, text)

mstr = p:p "\"\"\"" mstr_inner*:b "\"\"\"" ~text_node(p, b)

mstr_inner = p:p "#{" - block(h)?:b - "}" {b}
           | p:p < ( "\\" escape | ("\\\"\"\"" |
                   !&("\"\"\"" | "#{") . | . &("\"\"\"")) )+ >
            ~n(p, :text, text)

escape = number_escapes | escapes
escapes = "n" { "\n" }
                | "s" { " " }
                | "r" { "\r" }
                | "t" { "\t" }
                | "v" { "\v" }
                | "f" { "\f" }
                | "b" { "\b" }
                | "a" { "\a" }
                | "e" { "\e" }
                | "\\" { "\\" }
                | "\"" { "\"" }
                | "BS" { "\b" }
                | "HT" { "\t" }
                | "LF" { "\n" }
                | "VT" { "\v" }
                | "FF" { "\f" }
                | "CR" { "\r" }
                | "SO" { "\016" }
                | "SI" { "\017" }
                | "EM" { "\031" }
                | "FS" { "\034" }
                | "GS" { "\035" }
                | "RS" { "\036" }
                | "US" { "\037" }
                | "SP" { " " }
                | "NUL" { "\000" }
                | "SOH" { "\001" }
                | "STX" { "\002" }
                | "ETX" { "\003" }
                | "EOT" { "\004" }
                | "ENQ" { "\005" }
                | "ACK" { "\006" }
                | "BEL" { "\a" }
                | "DLE" { "\020" }
                | "DC1" { "\021" }
                | "DC2" { "\022" }
                | "DC3" { "\023" }
                | "DC4" { "\024" }
                | "NAK" { "\025" }
                | "SYN" { "\026" }
                | "ETB" { "\027" }
                | "CAN" { "\030" }
                | "SUB" { "\032" }
                | "ESC" { "\e" }
                | "DEL" { "\177" }
                | < . > { "\\" + text }

number_escapes = /[xX]/ < /[0-9a-fA-F]{1,5}/ > { [text.to_i(16)].pack("U") }
               | < /\d{1,6}/ > { [text.to_i].pack("U") }
               | /[oO]/ < /[0-7]{1,7}/ > { [text.to_i(16)].pack("U") }
               | /[uU]/ < /[0-9a-fA-F]{4}/ > { [text.to_i(16)].pack("U") }



